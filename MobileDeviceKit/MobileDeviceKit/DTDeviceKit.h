/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures
#import <Cocoa/Cocoa.h>

struct _AMDevice;

struct _AMDeviceNotificationContext;

struct _AMDeviceNotificationInfo {
    struct _AMDevice *_field1;
    int _field2;
    struct _AMDeviceNotificationContext *_field3;
};

struct dispatch_data_handle {
    struct dispatch_data_s *_field1;
};

struct dispatch_data_s;

struct fileStat {
    char _field1;
    id _field2;
    id _field3;
};

#pragma mark -

/*
 * File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/PrivateFrameworks/DTDeviceKit.framework/Versions/A/DTDeviceKit
 * UUID: 9EAC4AEA-3C77-3437-B32B-0797168C66A7
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 1196.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Supported
 *       Run path: @loader_path
 *               = /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/PrivateFrameworks/DTDeviceKit.framework/Versions/A
 */
@class ABPerson;
@class DTDKRemoteDeviceConsoleController;
@class DTDKRemoteDeviceToken;
@protocol DTDKRemoteDeviceDataListenerDelegate <NSObject>
- (void)deviceAttached:(DTDKRemoteDeviceToken *)device;
- (void)deviceDetached:(DTDKRemoteDeviceToken *)device;
@end


@protocol DTDKRemoteDeviceData <NSObject>
@property(readonly) NSString *localizedDeviceModel;
@property(readonly) struct _AMDServiceConnection *springBoardServicesService;
@property int deviceColor;
@property(readonly) NSImage *deviceImage;
@property(readonly) NSImage *deviceIcon;
@property(readonly) _Bool isConnected;
@property(copy) NSArray *debugStrategies;
@property(retain) DTDKRemoteDeviceConsoleController *deviceConsoleController;
@property(readonly) int deviceConnectionType;
@property(readonly) _Bool isSupportedOS;
@property(copy) NSArray *applicationDictionaries;
@property(copy) NSSet *provisioningProfiles;
@property(copy) NSSet *applications;
@property(copy) NSSet *configurationProfiles;
@property(copy) NSArray *supportedDeviceFamilies;
@property(copy) NSString *deviceArchitecture;
@property _Bool deviceHasStandardTools;
@property _Bool deviceHasInternalTools;
@property(retain) ABPerson *personInfo;
@property(copy) NSString *ownerID;
@property(copy) NSString *ownerRefType;
@property(copy) NSString *ownerName;
@property(copy) NSString *ownerEmail;
@property(copy) NSDate *deviceLastConnected;
@property(readonly) _Bool isPasscodeLocked;
@property(copy) NSString *devicePhoneNumber;
@property(copy) NSString *deviceDevelopmentStatus;
@property(copy) NSString *deviceCrashReporterKey;
@property(copy) NSString *deviceBluetoothMAC;
@property(copy) NSString *deviceWiFiMAC;
@property(copy) NSString *deviceMEID;
@property(copy) NSString *deviceIMEI;
@property(copy) NSString *deviceType;
@property(copy) NSString *deviceActivationState;
@property unsigned long long deviceCapacity;
@property(copy) NSString *buildVersion;
@property(copy) NSString *productVersion;
@property(readonly) NSString *deviceClassForDisplay;
@property(copy) NSString *deviceClass;
@property(copy) NSString *deviceSerialNumber;
@property(retain) id recoveryModeDeviceRef;
@property unsigned int locationID;
@property unsigned int deviceID;
@property struct _AMDevice *deviceRef;
@property(copy) NSString *deviceSoftwareVersion;
@property(copy) NSString *deviceName;
@property unsigned long long deviceECID;
@property(copy) NSString *deviceIdentifier;
- (void)askUserToUnlockDeviceForInstallation;
- (void)askUserToUnlockDeviceForPairing;
- (void)handleDeviceDarwinNotification:(id)arg1;
- (void)startDarwinNotificationListener;
- (void)stopDarwinNotificationListener;
- (id)installedProvisioningProfileWithUUID:(id)arg1;
- (void)uninstallProvisioningProfiles:(id)arg1;
- (void)uninstallProvisioningProfile:(id)arg1;
- (void)installProvisioningProfiles:(id)arg1;
- (void)installProvisioningProfile:(id)arg1;
- (void)updateActivationState;
- (void)updateProvisioningProfiles;
- (void)updateApplicationsSync;
- (void)updateApplications;
- (void)updateName;
- (void)updateData;
- (void)invalidate;
@end

@interface DTDKRemoteDeviceToken : NSObject <DTDKRemoteDeviceData>
{
    struct _AMDevice *_deviceRef;
    NSString *_deviceIdentifier;
    DTDKRemoteDeviceConsoleController *_deviceConsoleController;
    NSArray *_debugStrategies;
    unsigned long long _deviceCapacity;
    unsigned long long _deviceECID;
    NSString *_deviceName;
    NSString *_deviceSoftwareVersion;
    id _recoveryModeDeviceRef;
    NSString *_deviceSerialNumber;
    NSString *_deviceClass;
    NSString *_productVersion;
    NSString *_buildVersion;
    NSString *_deviceActivationState;
    NSString *_deviceType;
    NSString *_deviceIMEI;
    NSString *_deviceMEID;
    NSString *_deviceWiFiMAC;
    NSString *_deviceBluetoothMAC;
    NSString *_deviceCrashReporterKey;
    NSString *_deviceDevelopmentStatus;
    NSString *_deviceArchitecture;
    NSString *_devicePhoneNumber;
    NSDate *_deviceLastConnected;
    NSString *_ownerEmail;
    NSString *_ownerRefType;
    NSString *_ownerID;
    NSString *_ownerName;
    NSArray *_supportedDeviceFamilies;
    NSArray *_applicationDictionaries;
    NSSet *_applications;
    NSSet *_provisioningProfiles;
    NSSet *_configurationProfiles;
    unsigned int _locationID;
    unsigned int _deviceID;
    id _darwinNotificationService;
    struct _AMDServiceConnection *_springBoardServicesService;
    unsigned int _deviceHasInternalTools:1;
    unsigned int _deviceHasStandardTools:1;
    unsigned int _isPasscodeLocked:1;
    ABPerson *_personInfo;
    int _deviceColor;
}

+ (id)keyPathsForValuesAffectingDeviceIsActivated;
+ (id)keyPathsForValuesAffectingDeviceStatusImage;
+ (id)keyPathsForValuesAffectingDeviceImage;
+ (id)keyPathsForValuesAffectingDeviceIcon;
+ (id)keyPathsForValuesAffectingDeviceClassForDisplay;
+ (id)keyPathsForValuesAffectingLocalizedDeviceModel;
+ (id)keyPathsForValuesAffectingIsSupportedOS;
+ (void)addDeviceToMasterList:(id)arg1;
+ (id)deviceFromMasterListByDeviceRef:(struct _AMDevice *)arg1;
+ (id)deviceFromMasterListByDeviceIdentifier:(id)arg1;
@property int deviceColor; // @synthesize deviceColor=_deviceColor;
@property(copy) NSArray *debugStrategies; // @synthesize debugStrategies=_debugStrategies;
@property unsigned long long deviceECID; // @synthesize deviceECID=_deviceECID;
@property(retain) id darwinNotificationService; // @synthesize darwinNotificationService=_darwinNotificationService;
@property(copy) NSString *deviceArchitecture; // @synthesize deviceArchitecture=_deviceArchitecture;
@property(copy) NSSet *provisioningProfiles; // @synthesize provisioningProfiles=_provisioningProfiles;
@property(copy) NSArray *applicationDictionaries; // @synthesize applicationDictionaries=_applicationDictionaries;
@property(copy) NSSet *applications; // @synthesize applications=_applications;
@property(copy) NSSet *configurationProfiles; // @synthesize configurationProfiles=_configurationProfiles;
@property(copy) NSString *ownerID; // @synthesize ownerID=_ownerID;
@property(retain) ABPerson *personInfo; // @synthesize personInfo=_personInfo;
@property(copy) NSString *ownerRefType; // @synthesize ownerRefType=_ownerRefType;
@property(copy) NSString *ownerName; // @synthesize ownerName=_ownerName;
@property(copy) NSString *ownerEmail; // @synthesize ownerEmail=_ownerEmail;
@property(copy) NSDate *deviceLastConnected; // @synthesize deviceLastConnected=_deviceLastConnected;
@property(copy) NSString *devicePhoneNumber; // @synthesize devicePhoneNumber=_devicePhoneNumber;
@property _Bool deviceHasStandardTools; // @synthesize deviceHasStandardTools=_deviceHasStandardTools;
@property _Bool deviceHasInternalTools; // @synthesize deviceHasInternalTools=_deviceHasInternalTools;
@property(copy) NSString *deviceDevelopmentStatus; // @synthesize deviceDevelopmentStatus=_deviceDevelopmentStatus;
@property(copy) NSString *deviceCrashReporterKey; // @synthesize deviceCrashReporterKey=_deviceCrashReporterKey;
@property(copy) NSString *deviceBluetoothMAC; // @synthesize deviceBluetoothMAC=_deviceBluetoothMAC;
@property(copy) NSString *deviceWiFiMAC; // @synthesize deviceWiFiMAC=_deviceWiFiMAC;
@property(copy) NSString *deviceMEID; // @synthesize deviceMEID=_deviceMEID;
@property(copy) NSString *deviceIMEI; // @synthesize deviceIMEI=_deviceIMEI;
@property(copy) NSString *deviceType; // @synthesize deviceType=_deviceType;
@property(copy) NSString *deviceActivationState; // @synthesize deviceActivationState=_deviceActivationState;
@property unsigned long long deviceCapacity; // @synthesize deviceCapacity=_deviceCapacity;
@property(copy) NSString *buildVersion; // @synthesize buildVersion=_buildVersion;
@property(copy) NSString *productVersion; // @synthesize productVersion=_productVersion;
@property(copy) NSString *deviceClass; // @synthesize deviceClass=_deviceClass;
@property(copy) NSString *deviceSerialNumber; // @synthesize deviceSerialNumber=_deviceSerialNumber;
@property(retain) id recoveryModeDeviceRef; // @synthesize recoveryModeDeviceRef=_recoveryModeDeviceRef;
@property unsigned int locationID; // @synthesize locationID=_locationID;
@property unsigned int deviceID; // @synthesize deviceID=_deviceID;
@property(copy) NSString *deviceSoftwareVersion; // @synthesize deviceSoftwareVersion=_deviceSoftwareVersion;
@property(copy) NSString *deviceName; // @synthesize deviceName=_deviceName;
@property(copy) NSString *deviceIdentifier; // @synthesize deviceIdentifier=_deviceIdentifier;
@property(copy) NSArray *supportedDeviceFamilies; // @synthesize supportedDeviceFamilies=_supportedDeviceFamilies;
- (void)fetchSharedCacheWithProgress:(id)arg1 andCompletion:(void)arg2;
- (id)fetchSharedCacheSyncWithProgress:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
@property(readonly) _Bool isPasscodeLocked;
- (void)askUserToUnlockDeviceForInstallation;
- (void)askUserToUnlockDeviceForPairing;
@property(retain) DTDKRemoteDeviceConsoleController *deviceConsoleController;
- (void)handleDeviceDarwinNotification:(id)arg1;
- (void)stopDarwinNotificationListener;
- (void)startDarwinNotificationListener;
@property(readonly) struct _AMDServiceConnection *springBoardServicesService;
- (void)uninstallProvisioningProfiles:(id)arg1;
- (void)uninstallProvisioningProfile:(id)arg1;
- (void)installProvisioningProfiles:(id)arg1;
- (void)installProvisioningProfile:(id)arg1;
- (void)updateActivationState;
- (void)updateProvisioningProfiles;
- (void)updateApplications;
- (void)updateApplicationsSync;
- (id)_updateApplications;
- (void)updateName;
- (void)updateData;
- (void)mergeOtherToken:(id)arg1;
@property(readonly) int deviceConnectionType;
- (id)installedProvisioningProfileWithUUID:(id)arg1;
- (_Bool)deviceIsActivated;
- (void)setAsyncDeviceValue:(id)arg1 forDomain:(id)arg2 andKey:(id)arg3;
- (void)_setDeviceValueFromDictionary:(id)arg1;
- (int)setDeviceValue:(id)arg1 forDomain:(id)arg2 andKey:(id)arg3;
- (int)setDeviceValueWithoutLock:(id)arg1 forDomain:(id)arg2 andKey:(id)arg3;
- (id)getDeviceValueForDomain:(id)arg1 andKey:(id)arg2;
- (id)getDeviceValueWithoutLockForDomain:(id)arg1 andKey:(id)arg2;
- (void)_presentError:(id)arg1;
@property struct _AMDevice *deviceRef;
- (id)deviceProfileImage;
- (id)deviceFlatImage;
- (id)deviceStatusImage;
@property(readonly) NSImage *deviceImage;
@property(readonly) NSImage *deviceIcon;
@property(readonly) NSString *deviceClassForDisplay;
@property(readonly) NSString *localizedDeviceModel;
@property(readonly) _Bool isConnected;
- (void)invalidate;
- (id)propertyListRepresentation;
- (id)initWithPropertyListRepresentation:(id)arg1 error:(id *)arg2;
@property(readonly) _Bool isSupportedOS;
- (id)initWithDeviceIdentifier:(id)arg1;
- (void)dealloc;

@end

@interface DTDKCrashLog : NSObject
{
    NSString *rawPath;
    NSString *symbolicatedPath;
    NSString *incidentIdentifier;
    NSString *crashReporterKey;
    NSString *applicationName;
    NSString *deviceIdentifier;
    NSString *deviceIMEI;
    NSString *processPath;
    NSString *reportVersion;
    NSDate *date;
    NSString *dateString;
    int logType;
}

+ (id)keyPathsForValuesAffectingLogTypeString;
+ (id)keyPathsForValuesAffectingDateString;
+ (id)keyPathsForValuesAffectingHash;
+ (id)keyPathsForValuesAffectingFilename;
+ (id)keyPathsForValuesAffectingDisplayName;
+ (id)keyPathsForValuesAffectingLogText;
+ (id)keyPathsForValuesAffectingLocalPath;
+ (id)keyPathsForValuesAffectingSymbolicated;
+ (id)itemWithPath:(id)arg1;
+ (_Bool)validateCrashLogAtPath:(id)arg1;
+ (id)itemWithURL:(id)arg1;
+ (_Bool)validateCrashLogAtURL:(id)arg1;
@property int logType; // @synthesize logType;
@property(copy) NSString *reportVersion; // @synthesize reportVersion;
@property(copy) NSString *processPath; // @synthesize processPath;
@property(copy) NSString *deviceIMEI; // @synthesize deviceIMEI;
@property(copy) NSString *deviceIdentifier; // @synthesize deviceIdentifier;
@property(copy) NSString *crashReporterKey; // @synthesize crashReporterKey;
@property(copy) NSString *incidentIdentifier; // @synthesize incidentIdentifier;
@property(copy) NSString *applicationName; // @synthesize applicationName;
@property(copy) NSString *symbolicatedPath; // @synthesize symbolicatedPath;
@property(copy) NSString *rawPath; // @synthesize rawPath;
- (void)symbolicate;
@property(readonly) NSString *logTypeString;
@property(readonly) NSString *dateString;
@property(copy) NSDate *date; // @synthesize date;
@property(readonly) NSString *deviceName;
- (long long)compare:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(readonly) NSString *filename;
- (id)displayName;
- (_Bool)loadMetadata;
@property(readonly) NSString *logText;
@property(copy) NSString *localPath;
- (_Bool)exists;
@property(readonly) _Bool symbolicated;
- (id)description;
- (void)dealloc;
- (id)initWithPath:(id)arg1;
- (id)initWithURL:(id)arg1;

@end

@interface DTDKCrashLogController : NSObject
{
    NSSet *_crashLogs;
    NSString *_statusMessage;
    NSPredicate *_filterPredicate;
    struct dispatch_queue_s *scanQueue;
    struct dispatch_queue_s *logsQueue;
}

+ (id)keyPathsForValuesAffectingCrashLogs;
+ (id)keyPathsForValuesAffectingStatusMessage;
+ (id)controller;
@property(copy) NSPredicate *filterPredicate; // @synthesize filterPredicate=_filterPredicate;
@property(readonly) struct dispatch_queue_s *logsQueue; // @synthesize logsQueue;
@property(readonly) struct dispatch_queue_s *scanQueue; // @synthesize scanQueue;
@property(readonly) NSSet *crashLogs;
- (void)fsEventReceived:(id)arg1;
- (void)copyExternalCrashLog:(id)arg1;
- (_Bool)shouldAcceptDroppedCrashLogAtPath:(id)arg1;
- (id)crashLogRootDirectory;
@property(copy) NSString *statusMessage;
- (id)_symbolicationController;
- (void)dealloc;
- (id)init;

@end

@interface DTDKCrashLogSymbolicationController : NSObject
{
    NSString *_statusMessage;
}

+ (id)pathToSymbolicationTool;
+ (id)controller;
@property(copy) NSString *statusMessage; // @synthesize statusMessage=_statusMessage;
- (void)enqueueLogForSymbolication:(id)arg1;

@end

@interface RawDirectoryPredicate : NSPredicate
{
}

+ (id)predicate;
- (BOOL)evaluateWithObject:(id)arg1;

@end

@interface SymbolicatedDirectoryPredicate : NSPredicate
{
}

+ (id)predicate;
- (BOOL)evaluateWithObject:(id)arg1;

@end

@interface DTDKRemoteDeviceDataListener : NSObject
{
    struct _AMDeviceNotificationContext *deviceNotificationRef;
    _Bool _listenForWiFiDevices;
    NSThread *listenerThread;
    id <DTDKRemoteDeviceDataListenerDelegate> _delegate;
}

+ (id)sharedInstance;
@property(retain) id <DTDKRemoteDeviceDataListenerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) NSThread *listenerThread; // @synthesize listenerThread;
- (void)handleMobileDeviceNotification:(struct _AMDeviceNotificationInfo *)arg1;
@property _Bool listenForWiFiDevices;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)forceRescan;
//- (id)deviceDataFromRecoveryModeDevice:(struct __AMRecoveryModeDevice *)arg1 withError:(id *)arg2;
//- (id)deviceDataFromDFUDevice:(struct __AMDFUModeDevice *)arg1 withError:(id *)arg2;
- (id)deviceDataFromAMDevice:(struct _AMDevice *)arg1 withError:(id *)arg2;
- (void)recoveryModeDeviceDetached:(id)arg1;
- (void)DFUModeDeviceDetached:(id)arg1;
- (void)restoreDeviceDetached:(id)arg1;
- (void)deviceDetached:(id)arg1;
- (void)recoveryModeDeviceAttached:(id)arg1;
- (void)DFUModeDeviceAttached:(id)arg1;
- (void)restoreDeviceAttached:(id)arg1;
- (void)deviceAttached:(id)arg1;
- (void)_makeNoteOfDetachedDevice:(id)arg1;
- (void)_makeNoteOfAttachedDevice:(id)arg1;
- (id)deviceWithECID:(unsigned long long)arg1;
- (void)setDevice:(id)arg1 forECID:(unsigned long long)arg2;
- (id)deviceWithIdentifier:(id)arg1;
- (void)setDevice:(id)arg1 forIdentifier:(id)arg2;
- (id)deviceAtLocation:(unsigned int)arg1;
- (void)setDevice:(id)arg1 forLocation:(unsigned int)arg2;
- (void)presentError:(id)arg1;
- (void)listenerThreadImplementation;
- (void)stopListening;
- (void)startListening;
- (Class)deviceDataClass;
- (id)init;

@end

@interface DTDKScreenshot : NSObject
{
    NSString *path;
    NSImage *image;
    NSString *deviceIdentifier;
}

+ (id)keyPathsForValuesAffectingDeviceIdentifier;
+ (id)keyPathsForValuesAffectingImage;
+ (id)screenshotWithPath:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(readonly) NSString *deviceIdentifier;
@property(readonly) NSImage *image;
@property(copy) NSString *path; // @synthesize path;
- (void)dealloc;
- (id)initWithPath:(id)arg1;

@end

@interface DTDKScreenshotsController : NSObject
{
    NSMutableSet *_screenshots;
}

+ (id)controller;
- (void)deleteScreenshot:(id)arg1;
- (id)writeScreenshotNamed:(id)arg1 withData:(id)arg2 forDeviceIdentifier:(id)arg3;
- (id)writeScreenshotNamed:(id)arg1 withData:(id)arg2;
- (void)removeScreenshots:(id)arg1;
- (void)addScreenshots:(id)arg1;
- (void)removeScreenshotsObject:(id)arg1;
- (void)addScreenshotsObject:(id)arg1;
- (void)setScreenshots:(id)arg1;
- (id)screenshots;
- (id)mutableScreenshots;
- (void)fsEventReceived:(id)arg1;
- (id)screenshotRootDirectory;

@end

@interface DTDKRemoteDeviceDebugStrategy : NSObject
{
    NSString *_sourcePath;
    NSString *_keyName;
    NSString *_domainName;
    NSString *_strategyDescription;
    NSString *_removeKey;
    id <DTDKRemoteDeviceData> _device;
    BOOL _flag;
}

+ (id)defaultStrategyDefinitions;
+ (id)defaultEAPOLStrategy;
+ (id)defaultVPNStrategy;
+ (id)defaultNetworkStrategy;
@property(readonly) id <DTDKRemoteDeviceData> device; // @synthesize device=_device;
@property(readonly) NSString *removeKey; // @synthesize removeKey=_removeKey;
@property(readonly) NSString *strategyDescription; // @synthesize strategyDescription=_strategyDescription;
@property(readonly) NSString *domainName; // @synthesize domainName=_domainName;
@property(readonly) NSString *keyName; // @synthesize keyName=_keyName;
@property(readonly) NSString *sourcePath; // @synthesize sourcePath=_sourcePath;
@property(readonly) NSString *summaryString;
- (void)removeLogs;
- (void)setFlag:(BOOL)arg1;
@property(readonly) BOOL flag;
- (BOOL)flagFromDevice;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 forDevice:(id)arg2;
- (id)initWithKey:(id)arg1 removeKey:(id)arg2 domain:(id)arg3 description:(id)arg4 sourcePath:(id)arg5 forDevice:(id)arg6;

@end

@interface DTDKRemoteDeviceConsoleController : NSObject
{
    struct _AMDevice *_deviceRef;
    struct _AMDServiceConnection *_connectionRef;
    struct dispatch_queue_s *_queue;
    struct dispatch_queue_s *_socketQueue;
    struct dispatch_data_handle *_consoleData;
    struct dispatch_source_s *_consoleSource;
    NSMutableString *_consoleString;
    unsigned long long _changeCount;
}

+ (id)controllerForDeviceRef:(struct _AMDevice *)arg1;
@property(readonly) unsigned long long changeCount; // @synthesize changeCount=_changeCount;
@property(readonly) NSString *consoleString;
- (void)clear;
- (void)reload;
- (void)invalidate;
- (void)finalize;
- (void)dealloc;
- (id)initWithDeviceRef:(struct _AMDevice *)arg1;

@end

@class DTDKApplication;

@interface DTDKApplicationItemBase : NSObject
{
    DTDKApplicationItemBase *parent;
    NSImage *_icon;
    NSMutableSet *_children;
    _Bool _invalidated;
}

+ (BOOL)shouldProcessPath:(id)arg1;
+ (id)keyPathsForValuesAffectingMutableChildren;
+ (id)keyPathsForValuesAffectingDevicePath;
+ (id)keyPathsForValuesAffectingIcon;
+ (id)keyPathsForValuesAffectingIsFairPlayEncrypted;
+ (id)keyPathsForValuesAffectingApplication;
+ (id)alloc;
@property(retain) DTDKApplicationItemBase *parent; // @synthesize parent;
- (id)childNamed:(id)arg1;
- (long long)compare:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
@property(readonly) _Bool isLeaf;
- (void)removeChildrenObject:(id)arg1;
- (void)addChildrenObject:(id)arg1;
@property(readonly) NSMutableSet *mutableChildren;
@property(copy) NSSet *children;
@property(readonly) NSString *devicePath;
@property(copy) NSImage *icon;
@property(readonly) _Bool isFairPlayEncrypted;
@property(readonly) NSString *name;
@property(readonly) NSImage *defaultIcon;
@property(readonly) NSString *subPath;
@property(readonly) NSString *containerPath;
@property(readonly) NSString *identifier;
@property(readonly) NSString *deviceIdentifier;
@property(readonly) struct __AFCConnection *connection;
- (void)releaseConnectionRef;
- (struct __AFCConnection *)retainConectionRef;
@property(readonly) DTDKApplication *application;
- (_Bool)removeFromDeviceWithError:(id *)arg1;
- (_Bool)uploadFile:(id)arg1 error:(id *)arg2;
- (id)sandboxFileBases;
- (_Bool)downloadToFile:(id)arg1 error:(id *)arg2;
- (void)lazyRefresh;
- (void)refresh;
- (void)invalidate;
- (void)dealloc;

@end

@interface DTDKApplication : DTDKApplicationItemBase
{
    NSDictionary *plist;
    id <DTDKRemoteDeviceData> deviceData;
    struct __AFCConnection *connection;
    NSImage *_appIcon;
    unsigned int _useAggregateItem:1;
    unsigned long long _connection_rc;
}

+ (id)keyPathsForValuesAffectingInstalledPath;
+ (struct dispatch_queue_s *)appIconsQueue;
+ (id)keyPathsForValuesAffectingIsFairPlayEncrypted;
+ (id)keyPathsForValuesAffectingIdentifier;
+ (id)keyPathsForValuesAffectingDevicePath;
+ (id)keyPathsForValuesAffectingName;
+ (id)applicationWithPropertiesFromApplication:(id)arg1;
+ (id)applicationWithDeviceData:(id)arg1 andPlist:(id)arg2;
@property(retain, nonatomic) NSImage *appIcon; // @synthesize appIcon=_appIcon;
@property struct __AFCConnection *connection; // @synthesize connection;
@property(retain) id <DTDKRemoteDeviceData> deviceData; // @synthesize deviceData;
@property(copy) NSDictionary *plist; // @synthesize plist;
- (void)_notifyApplicationDataDidChange;
- (_Bool)uploadFile:(id)arg1 syncRecords:(id)arg2 resultingSyncRecords:(id)arg3 error:(id *)arg4;
- (_Bool)uploadFile:(id)arg1 error:(id *)arg2;
- (void)refresh;
@property _Bool useAggregateItem;
@property(readonly) NSString *installedPath;
- (id)defaultIcon;
- (_Bool)isLeaf;
- (_Bool)isFairPlayEncrypted;
- (id)identifier;
@property(readonly) NSString *executableName;
- (id)devicePath;
- (id)name;
- (id)deviceIdentifier;
- (id)application;
- (void)releaseConnectionRef;
- (struct __AFCConnection *)retainConectionRef;
- (void)invalidate;
- (void)dealloc;
- (id)initWithPropertyListRepresentation:(id)arg1 error:(id *)arg2;
- (id)bundlePath;
- (id)minimumOSVersion;
- (id)executableVersion;
- (id)bundleIdentifier;

@end

@interface DTDKApplicationPackage : DTDKApplicationItemBase
{
}

+ (id)item;
- (_Bool)uploadFile:(id)arg1 syncRecords:(id)arg2 resultingSyncRecords:(id)arg3 error:(id *)arg4;
- (_Bool)_processUploadOf:(id)arg1 devicePath:(id)arg2 syncRecords:(id)arg3 resultingSyncRecords:(id)arg4 error:(id *)arg5;
- (void)_createDirAtDevicePath:(id)arg1;
- (void)_removeFileOrDirAtDevicePath:(id)arg1;
- (id)_readDeviceDirectory:(id)arg1;
- (void)_afc_stat:(id)arg1 status:(struct fileStat *)arg2;
- (id)modificationInfoStringForLocalPath:(id)arg1;
- (BOOL)_copyFile:(id)arg1 toDevicePath:(id)arg2 error:(id *)arg3;
- (void)_presentIfError:(id)arg1;
- (_Bool)uploadFile:(id)arg1 error:(id *)arg2;
- (void)_notifyFinishOfUpload;
- (void)_notifyStartOfUpload;
- (id)sandboxFileBases;
- (_Bool)downloadToFile:(id)arg1 error:(id *)arg2;
- (void)_notifyFinishOfDownload;
- (void)_notifyStartOfDownload;
- (id)subPath;
- (id)defaultIcon;
- (id)name;

@end

@interface DTDKApplicationFileBase : DTDKApplicationItemBase
{
    NSString *name;
}

+ (id)keyPathsForValuesAffectingDefaultIcon;
+ (id)itemWithName:(id)arg1;
@property(copy) NSString *name; // @synthesize name;
- (id)defaultIcon;
- (_Bool)removeFromDeviceWithError:(id *)arg1;
- (void)dealloc;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@end

@interface DTDKApplicationFile : DTDKApplicationFileBase
{
}

+ (id)itemWithName:(id)arg1 andParent:(id)arg2 fromStream:(id)arg3 error:(id *)arg4;
+ (id)itemWithParent:(id)arg1 fromLocalFile:(id)arg2 error:(id *)arg3;
- (_Bool)isLeaf;
- (id)defaultIcon;
- (id)sandboxFileBases;
- (_Bool)downloadToFile:(id)arg1 error:(id *)arg2;

@end

@interface DTDKApplicationDirectory : DTDKApplicationFileBase
{
}

+ (id)itemWithParent:(id)arg1 fromLocalDirectory:(id)arg2 error:(id *)arg3;
- (void)refresh;
- (_Bool)isLeaf;
- (id)defaultIcon;
- (id)sandboxFileBases;
- (_Bool)downloadToFile:(id)arg1 error:(id *)arg2;
- (_Bool)removeFromDeviceWithError:(id *)arg1;

@end
@class DTDKInstallBundle;
@class DTDKInstallBundleController;

/*
@interface DTDKInstallBundle (DTDeviceKitExtensions)
- (_Bool)canBeInstalledOn:(id)arg1;
@end

@interface DTDKInstallBundleController (DTDeviceKitExtensions)
- (id)installBundlesInstallableOn:(id)arg1;
@end

@interface DTDKProvisioningProfile (DTDeviceKitExtensions)
+ (id)keyPathsForValuesAffectingExpirationWarningImage;
+ (id)keyPathsForValuesAffectingIconImage;
@property(readonly) NSString *teamName;
@property(readonly) NSString *teamID;
@property(readonly) NSImage *expirationWarningImage;
@property(readonly) NSImage *iconImage;
@end

@interface DTDKProvisioningProfileController (DTDeviceKitExtensions)
- (void)uiLoaded;
@end
 */
